/*
  COPYRIGHT (c) 2012-2020 Esri R&D Center Zurich
  TRADE SECRETS: ESRI PROPRIETARY AND CONFIDENTIAL
  Unpublished material - all rights reserved under the
  Copyright Laws of the United States and applicable international
  laws, treaties, and conventions.

  For additional information, contact:
  Environmental Systems Research Institute, Inc.
  Attn: Contracts and Legal Services Department
  380 New York Street
  Redlands, California, 92373
  USA

  email: contracts@esri.com
*/

// !! DO NOT MODIFY !! - this file is automatically generated by CGAC
// Sat May 09 12:07:07 CEST 2020

public:
	virtual void ambient_b(double val);
	virtual void ambient_g(double val);
	virtual void ambient_r(double val);
	virtual void bumpValue(double val);
	virtual void bumpmap_rw(double val);
	virtual void bumpmap_su(double val);
	virtual void bumpmap_sv(double val);
	virtual void bumpmap_tu(double val);
	virtual void bumpmap_tv(double val);
	virtual void color_b(double val);
	virtual void color_g(double val);
	virtual void color_r(double val);
	virtual void colormap_rw(double val);
	virtual void colormap_su(double val);
	virtual void colormap_sv(double val);
	virtual void colormap_tu(double val);
	virtual void colormap_tv(double val);
	virtual void dirtmap_rw(double val);
	virtual void dirtmap_su(double val);
	virtual void dirtmap_sv(double val);
	virtual void dirtmap_tu(double val);
	virtual void dirtmap_tv(double val);
	virtual void emissive_b(double val);
	virtual void emissive_g(double val);
	virtual void emissive_r(double val);
	virtual void emissivemap_rw(double val);
	virtual void emissivemap_su(double val);
	virtual void emissivemap_sv(double val);
	virtual void emissivemap_tu(double val);
	virtual void emissivemap_tv(double val);
	virtual void metallic(double val);
	virtual void metallicmap_rw(double val);
	virtual void metallicmap_su(double val);
	virtual void metallicmap_sv(double val);
	virtual void metallicmap_tu(double val);
	virtual void metallicmap_tv(double val);
	virtual void normalmap_rw(double val);
	virtual void normalmap_su(double val);
	virtual void normalmap_sv(double val);
	virtual void normalmap_tu(double val);
	virtual void normalmap_tv(double val);
	virtual void occlusionmap_rw(double val);
	virtual void occlusionmap_su(double val);
	virtual void occlusionmap_sv(double val);
	virtual void occlusionmap_tu(double val);
	virtual void occlusionmap_tv(double val);
	virtual void opacity(double val);
	virtual void opacitymap_cutoff(double val);
	virtual void opacitymap_rw(double val);
	virtual void opacitymap_su(double val);
	virtual void opacitymap_sv(double val);
	virtual void opacitymap_tu(double val);
	virtual void opacitymap_tv(double val);
	virtual void reflectivity(double val);
	virtual void roughness(double val);
	virtual void roughnessmap_rw(double val);
	virtual void roughnessmap_su(double val);
	virtual void roughnessmap_sv(double val);
	virtual void roughnessmap_tu(double val);
	virtual void roughnessmap_tv(double val);
	virtual void shininess(double val);
	virtual void specular_b(double val);
	virtual void specular_g(double val);
	virtual void specular_r(double val);
	virtual void specularmap_rw(double val);
	virtual void specularmap_su(double val);
	virtual void specularmap_sv(double val);
	virtual void specularmap_tu(double val);
	virtual void specularmap_tv(double val);
	virtual void name(const std::wstring& val);
	virtual void opacitymap_mode(const std::wstring& val);
	virtual void shader(const std::wstring& val);

// default Material keys
	virtual void ambientColor(const std::vector<double>& val);
	virtual void diffuseColor(const std::vector<double>& val);
	virtual void emissiveColor(const std::vector<double>& val);
	virtual void specularColor(const std::vector<double>& val);
	virtual void bumpMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void diffuseMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void emissiveMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void metallicMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void normalMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void occlusionMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void opacityMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void roughnessMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);
	virtual void specularMap(const std::vector<prtx::TexturePtr>& val, const std::vector<std::wstring>& resolveMapKeys);

