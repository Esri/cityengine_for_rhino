using System;
using System.Collections.Generic;

using Grasshopper.Kernel;
using Grasshopper.Kernel.Types;
using Grasshopper.Kernel.Parameters;

using Grasshopper.GUI;
using Grasshopper.GUI.Canvas;

using GH_IO;
using GH_IO.Serialization;
using Grasshopper;
using Grasshopper.Kernel.Data;

using Rhino.Geometry;

// In order to load the result of this wizard, you will also need to
// add the output bin/ folder of this project to the list of loaded
// folder in Grasshopper.
// You can use the _GrasshopperDeveloperSettings Rhino command for that.

namespace GrasshopperPRT
{

    public class GrasshopperPRTComponent : GH_Component
    {
        // Constants

        const int DEFAULT_INPUT_PARAM_COUNT = 2;

        // Member variables:

        /// Store the optional input parameters
        RuleAttribute[] mRuleAttributes;
        int mCurrentInputCount;

        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public GrasshopperPRTComponent()
          : base("GrasshopperPRT", "GHPRT",
              "Provide acces to the CityEngine PRT engine to Grasshopper",
              "Special", "Esri")
        {
            // Initialize PRT engine
            bool status = PRTWrapper.InitializeRhinoPRT();
            Console.WriteLine("RhinoPRT status is: " + status);

            mCurrentInputCount = 0;
            mRuleAttributes = new RuleAttribute[0];
        }

        ~GrasshopperPRTComponent()
        {
            PRTWrapper.ShutdownRhinoPRT();
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // The default parameters are a rpk package and a set of geometries.
            pManager.AddTextParameter("Path to RPK", "RPK",
                "The path to a runtime package containing the rules to execute on the input geometry.",
                GH_ParamAccess.item);
            pManager.AddGeometryParameter("Initial Shapes", "Shape",
                "The initial geometry on which to execute the rules.",
                GH_ParamAccess.item);
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // The default output is the generated geometries.
            pManager.AddGeometryParameter("Generated Shapes", "o_shape",
                "The geometry generated by the rule set.",
                GH_ParamAccess.item);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // Get default inputs
            string rpk_file = "";
            int nb_inputs = Params.Input.Count;
            if (!DA.GetData(0, ref rpk_file)) { return; }
            if (rpk_file.Length == 0) { return; }

            // Once we have a rpk file, directly extract the rule attributes
            PRTWrapper.SetPackage(rpk_file);

            // Update the rule attributes only the first time rpk is set.
            if (mRuleAttributes.Length == 0)
            {
                mRuleAttributes = PRTWrapper.GetRuleAttributes();
                foreach (RuleAttribute attrib in mRuleAttributes)
                {
                    CreateInputParameter(attrib);
                    mCurrentInputCount++;
                }

                // Update the node layout
                ExpireSolution(true);
                return;
            }

            IGH_GeometricGoo shape = null;
            if (!DA.GetData<IGH_GeometricGoo>("Initial Shapes", ref shape)) { return; }

            Mesh mesh = null;
            bool status = true;

            // Cast the shape to its actual Rhino.Geometry type.
            IGH_GeometricGoo geoGoo = shape; // copy
            if (shape is GH_Mesh || shape is Mesh)
            {
                var geoBase = GH_Convert.ToGeometryBase(geoGoo);
                mesh = geoBase as Mesh;

            }
            else if (shape is GH_Brep || shape is Brep)
            {
                Brep brepShape = null;
                status = GH_Convert.ToBrep(geoGoo, ref brepShape, GH_Conversion.Both);
                if (!status) return;

                mesh = new Mesh();
                mesh.Append(Mesh.CreateFromBrep(brepShape, MeshingParameters.DefaultAnalysisMesh));

            }
            else if (shape is GH_Rectangle)
            {
                Rectangle3d rect = Rectangle3d.Unset;
                status = GH_Convert.ToRectangle3d(geoGoo, ref rect, GH_Conversion.Both);
                if (!status) return;

                mesh = Mesh.CreateFromClosedPolyline(rect.ToPolyline());
            }
            else if (shape is Surface || shape is GH_Surface)
            {
                Surface surf = null;
                status = GH_Convert.ToSurface(geoGoo, ref surf, GH_Conversion.Both);
                if (!status) return;

                mesh = Mesh.CreateFromSurface(surf, MeshingParameters.DefaultAnalysisMesh);
            }
            else
            {
                // fallback to original shape if no conversion was found.
                DA.SetData("Generated Shapes", geoGoo);
                return;
            }

            if (!mesh.IsValid) return;

            PRTWrapper.AddMesh(mesh);

            // Get all node input corresponding to the list of mRuleAttributes registered.
            fillAttributesFromNode(DA);

            Mesh generatedMesh = PRTWrapper.GenerateMesh();

            DA.SetData("Generated Shapes", generatedMesh);
        }

        public void CreateInputParameter(RuleAttribute attrib)
        {
            switch (attrib.attribType)
            {
                case AnnotationArgumentType.AAT_BOOL:
                    Param_Boolean param_bool = new Param_Boolean
                    {
                        Name = attrib.mFullName,
                        NickName = attrib.mNickname,
                        Optional = true
                    };
                    Params.RegisterInputParam(param_bool);
                    return;
                case AnnotationArgumentType.AAT_INT:
                case AnnotationArgumentType.AAT_FLOAT:
                    Param_Number param_number = new Param_Number
                    {
                        Name = attrib.mFullName,
                        NickName = attrib.mNickname,
                        Optional = true
                    };
                    Params.RegisterInputParam(param_number);
                    return;
                case AnnotationArgumentType.AAT_STR:
                    Param_String param_str = new Param_String
                    {
                        Name = attrib.mFullName,
                        NickName = attrib.mNickname,
                        Optional = true
                    };
                    Params.RegisterInputParam(param_str);
                    return;
                default:
                    Param_GenericObject param = new Param_GenericObject
                    {
                        Name = attrib.mFullName,
                        NickName = attrib.mNickname,
                        Optional = true
                    };
                    Params.RegisterInputParam(param);
                    return;
            }
        }

        private void fillAttributesFromNode(IGH_DataAccess DA)
        {
            for (int idx = 0; idx < mRuleAttributes.Length; ++idx)
            {
                RuleAttribute attrib = mRuleAttributes[idx];

                switch (attrib.attribType)
                {
                    case AnnotationArgumentType.AAT_FLOAT:
                        GH_Number value = new GH_Number(0.0);
                        if (!DA.GetData<GH_Number>(attrib.mFullName, ref value)) continue;
                        PRTWrapper.SetRuleAttributeDouble(attrib.mRuleFile, attrib.mFullName, value.Value);
                        break;
                    default: // We just support floating point number for the prototype
                        continue;
                }
            }

        }


        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// </summary>
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                // You can add image files to your project resources and access them like this:
                //return Resources.IconForThisComponent;
                return null;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("ad54a111-cdbc-4417-bddd-c2195c9482d8"); }
        }
    }
}
